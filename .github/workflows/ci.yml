name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taskmanager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run ruff linting
      working-directory: ./backend
      run: ruff check .
    
    - name: Run mypy type checking
      working-directory: ./backend
      run: mypy app/
    
    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskmanager_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        JWT_ISSUER: taskmanager-test
      run: alembic upgrade head
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskmanager_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        JWT_ISSUER: taskmanager-test
        ACCESS_TTL_MIN: 15
        REFRESH_TTL_DAYS: 7
        OTP_TTL_MIN: 10
        PUBLIC_URL: http://localhost:8000
        TENANT_SUBDOMAIN_BASE: example.local
      run: pytest -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run TypeScript type checking
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: taskmanager-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: taskmanager-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Commented out Cloud Run deployment section
  # Uncomment and configure when ready to deploy
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [backend-test, frontend-test, docker-build]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Authenticate to Google Cloud
  #     uses: google-github-actions/auth@v1
  #     with:
  #       credentials_json: ${{ secrets.GCP_SA_KEY }}
  #   
  #   - name: Set up Cloud SDK
  #     uses: google-github-actions/setup-gcloud@v1
  #   
  #   - name: Configure Docker for GCR
  #     run: gcloud auth configure-docker
  #   
  #   - name: Build and push backend image
  #     run: |
  #       docker build -t gcr.io/YOUR_PROJECT_ID/taskmanager-backend:${{ github.sha }} ./backend
  #       docker push gcr.io/YOUR_PROJECT_ID/taskmanager-backend:${{ github.sha }}
  #   
  #   - name: Build and push frontend image
  #     run: |
  #       docker build -t gcr.io/YOUR_PROJECT_ID/taskmanager-frontend:${{ github.sha }} ./frontend
  #       docker push gcr.io/YOUR_PROJECT_ID/taskmanager-frontend:${{ github.sha }}
  #   
  #   - name: Deploy backend to Cloud Run
  #     run: |
  #       gcloud run deploy taskmanager-backend \
  #         --image gcr.io/YOUR_PROJECT_ID/taskmanager-backend:${{ github.sha }} \
  #         --platform managed \
  #         --region YOUR_REGION \
  #         --allow-unauthenticated \
  #         --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }},REDIS_URL=${{ secrets.REDIS_URL }},JWT_SECRET=${{ secrets.JWT_SECRET }}
  #   
  #   - name: Deploy frontend to Cloud Run
  #     run: |
  #       gcloud run deploy taskmanager-frontend \
  #         --image gcr.io/YOUR_PROJECT_ID/taskmanager-frontend:${{ github.sha }} \
  #         --platform managed \
  #         --region YOUR_REGION \
  #         --allow-unauthenticated \
  #         --set-env-vars NEXT_PUBLIC_API_URL=https://taskmanager-backend-YOUR_SERVICE_ID-YOUR_REGION.a.run.app